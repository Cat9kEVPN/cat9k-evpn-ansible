---

- name: Enable TRM for EVPN overlay
  hosts: all
  gather_facts: no
  vars:
    playbook_mode: ''
    leaf_template_list:
      - '../templates/vrf_definition_trm.j2'
      - '../templates/pim_interfaces_trm.j2'
      - '../templates/rp_interfaces_trm.j2'
    common_template_list:
      - '../templates/bgp_mvpn_af_trm.j2'

  tasks:

            - name: Load and process TRM input file
              run_once: True
              block:
              - name: Get VRFs to configure
                when: playbook_mode != '-inc'
                block:
                - name: Load vars from trm_overlay_db.yml
                  include_vars: 
                    file: "./group_vars/trm_overlay_db.yml"
                    name: trm_db_vars

                - name: Get VRFs from trm_overlay_db.yml
                  set_fact: 
                    vrfs: "{{ trm_db_vars.dag }}"

              - name: Collect RP loopbacks, RP interfaces data and VRFs AFs from trm_overlay_db.yml
                trm_preprocess:
                  vrf_trm_info: "{{ {'vrfs': vrfs, 'inventory_leafs': groups['leaf']} }}"
                register: processed_trm_db

              - name: Include rp_loopbacks_data, vrfs_afs vars
                set_fact:
                  "{{ item.key }}": "{{ item.value }}"
                with_dict: "{{ processed_trm_db }}"

            - name: Run and parse show run nve
              ansible.utils.cli_parse:
                command: "show run nve"
                parser:
                  name: ansible.netcommon.pyats
                set_fact: overlay_dict

            - name: Get overlay data to collect VRFs and SVIs data
              when: inventory_hostname in groups['leaf'] and vrfs != {}
              block:
              - name: Collect SVIs from the overlay data 
                set_fact:
                  svis: "{{ svis | default([]) + [ item.key ] }}"
                when: item.value.vrf in vrfs
                with_dict: "{{ overlay_dict.svis | default({}) }}"

            - name: Get RP loopbacks to enable PIM-Sparse mode
              when: inventory_hostname in rp_loopbacks
              set_fact:
                rp_loopbacks: "{{ rp_loopbacks[inventory_hostname] }}"

            - name: Collect L2VPN addr family neighbor and set it as MVPN AF neighbors
              block:
              - set_fact: 
                  bgp: "{{ {'as_number': (overlay_dict.bgp | list)[0]} }}"
              - set_fact:
                  bgp: "{{ bgp | combine({
                    'mvpn_neighbors': overlay_dict.bgp[as_number].address_family['l2vpn evpn'].address_family_neighbor | list,
                    'mvpn_afs': vrf_afs }) }}" 
              - set_fact:
                  bgp: "{{ bgp | default({}) | combine({'rrc': 'true'}) }}"
                when: inventory_hostname in (groups['spine'] | default([]))

            - name: Read leaf-only config template files
              when: inventory_hostname in groups['leaf']
              cli_config:
                config: "{{ lookup('template', item) }}"
                diff_match: none
              register: result
              loop: "{{ leaf_template_list }}"
    
            - name: Read BGP neighbor MVPN AF template files
              cli_config:
                config: "{{ lookup('template', item) }}"
                diff_match: none
              register: result
              loop: "{{ common_template_list }}"
