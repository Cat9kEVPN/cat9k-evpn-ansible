---

- name: Enable DHCP for EVPN overlay
  hosts: leaf
  gather_facts: no
  vars:
    playbook_mode: ''
    svis: {}
    template_list:
      - '../templates/dhcp_overlay.j2'

  tasks:
            - name: Load and process DHCP input file
              run_once: true
              when: playbook_mode == ""
              block:
              - name: Load vars from dhcp_db.yml
                include_vars: 
                  file: "./group_vars/dhcp_db.yml"
                  name: dhcp_db_vars

              - set_fact:
                  vrfs: "{{ dhcp_db_vars.dag }}"
                  dhcp_options: "{{ dhcp_db_vars.dhcp_options | default({}) }}"
                  
            - name: Get list of VRFs
              run_once: true
              set_fact:
                vrf_list: "{{ vrfs.keys() }}"

            - name: Collect VRFs with no relay interface set if any
              run_once: true
              dhcp_preprocess:
                get_no_src_vrf: "{{ vrfs }}"
              register: no_src_vrf

            - name: Collect VRFs, SVIs and overlay interfaces data
              block:
              - name: Run and parse show run nve
                ansible.utils.cli_parse:
                  command: "show run nve"
                  parser:
                    name: ansible.netcommon.pyats
                  set_fact: overlay_dict

              - name: Collect VRFs from show run nve output if dag is set to 'all'
                when: '"all" in vrf_list'
                block:
                - set_fact:
                    vrf_dev_dict: "{{ overlay_dict.vrf | default({}) }}"
                - set_fact: 
                    all_vrfs: "{{ vrf_dev_dict | difference(vrf_list) }}"
                    vrf_list: "{{ vrf_dev_dict | list }}"

              - name: Collect svis of the VRFs from show run nve output
                set_fact: 
                  svis: "{{ svis | combine ({item.value.vrf: (svis[item.value.vrf] | default([])) + [item.key]}) }}"
                with_dict: "{{ overlay_dict.svis }}"
                when: item.value.vrf in vrf_list and item.value.svi_type == 'access'

              - name: Assign relay src interface from show run nve output for VRFs if not defined already
                dhcp_preprocess:
                  get_src_intf: "{{ {
                    'all_vrfs': vrf_list, 
                    'overlay_intf': overlay_dict.overlay_interfaces | default({}), 
                    'no_src_vrf': no_src_vrf.vrfs | default([]) } }}"
                register: ovrly_intf_output

            - name: Apply configurations
              cli_config:
                config: "{{ lookup('template', item) }}"
                diff_match: none 
              register: result
              loop: "{{ template_list }}"
