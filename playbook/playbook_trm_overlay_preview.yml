---

- name: Enable TRM for EVPN overlay
  hosts: all
  gather_facts: no
  vars:
    vrfs: {}
    playbook_mode: ''
    trm_block: ''
    leaf_template_list:
      - '../templates/vrf_definition_trm.j2'
      - '../templates/pim_interfaces_trm.j2'
      - '../templates/rp_interfaces_trm.j2'
    common_template_list:
      - '../templates/bgp_mvpn_af_trm.j2'

  tasks:

            - name: Load and process TRM input file
              run_once: True
              block:
              - name: Get VRFs to configure
                when: playbook_mode != '-inc'
                block:
                - name: Load vars from trm_overlay_db.yml
                  include_vars: 
                    file: "./group_vars/trm_overlay_db.yml"
                    name: trm_db_vars

                - name: Get VRFs from trm_overlay_db.yml
                  set_fact: 
                    vrfs: "{{ trm_db_vars.dag }}"

              - name: Collect RP loopbacks and VRFs AFs from trm_overlay_db.yml
                trm_preprocess:
                  vrf_trm_info: "{{ {'vrfs': vrfs, 'inventory_leafs': groups['leaf']} }}"
                register: trm_db_data

              - name: Collect all RP loopback data
                set_fact: 
                  rp_interfaces_data: "{{ trm_db_data.rp_interfaces }}"

            - name: Get overlay data to collect VRFs and SVIs data
              when: inventory_hostname in groups['leaf'] and vrfs != {}
              block:
              - name: Run and parse show run nve
                ansible.utils.cli_parse:
                  command: "show run nve"
                  parser:
                    name: ansible.netcommon.pyats
                  set_fact: overlay_dict

              - name: Collect SVIs from the overlay data 
                set_fact:
                  svis: "{{ svis | default([]) + [ item.key ] }}"
                when: item.value.vrf in vrfs
                with_dict: "{{ overlay_dict.svis | default({}) }}"

              - name: Get RP loopbacks to enable PIM-Sparse mode
                set_fact:
                  rp_loopbacks: "{{ trm_db_data.rp_loopbacks[inventory_hostname] | default([]) }}"

            - name: Collect BGP AFs from device
              block:

              - name: Run and parse show run | sec bgp
                ansible.utils.cli_parse:
                  command: "show run | sec bgp"
                  parser:
                    name: ansible.netcommon.pyats
                  set_fact: bgp_dict
                  
              - name: Collect L2VPN addr family neighbor and set it as MVPN AF neighbors
                block:
                - set_fact: 
                    bgp_list: "{{ (bgp_dict.bgp | default({})) | dict2items }}"
                - set_fact:
                    bgp: "{{ bgp | default({}) | combine(
                      { 'as_number': bgp_list[0].value.as_number | string },
                      { 'mvpn_neighbors': bgp_list[0].value.address_family['l2vpn evpn'].address_family_neighbor | list },
                      { 'mvpn_afs': trm_db_data.vrf_afs }
                      ) }}"

              - name: Set spines as RRC
                when: inventory_hostname in (groups['spine'] | default([]))
                set_fact:
                  bgp: "{{ bgp | default({}) | combine({'rrc': 'true'}) }}"

            - name: Read leaf-only config template files
              when: inventory_hostname in groups['leaf']
              set_fact:
                trm_block: "{{ trm_block }}{{ lookup('template', item) }}"
              loop: "{{ leaf_template_list }}"

            - name: Read BGP neighbor MVPN AF template files
              set_fact:
                trm_block: "{{ trm_block }}{{ lookup('template', item) }}"
              loop: "{{ common_template_list }}"

            - name: Copy configurations to respective file ( <inventory_hostname>-trm{{ playbook_mode }}.txt ) under 'preview_files' folder
              copy:
                dest: preview_files/{{inventory_hostname}}-trm{{ playbook_mode }}.txt
                content: "{{ trm_block | regex_replace('#jinja2: lstrip_blocks: \"True\", trim_blocks: \"True\"', '') | regex_replace('\\n(\\s+)','\n') | regex_replace('! ','\n\n! ') }}"


- name: Display output file info
  hosts: localhost
  gather_facts: no
  run_once: True
  vars:
    playbook_mode: ''

  tasks:        
            - debug:
                msg: Please refer to <hostname>-trm{{ playbook_mode }}.txt in 'preview_files' folder
