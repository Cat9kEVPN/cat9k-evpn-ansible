---

- name: Automated VXLAN deployment with BGP EVPN L2/L3 underlay w/ Spine
  hosts: leaf
  gather_facts: no
  vars:
    playbook_mode: ""
    intf_conf_list: []
    
  tasks:

          - name: Collect VLANs from overlay_db
            when: playbook_mode == ''
            run_once: true
            block:
            - name: Collect vars from overlay_db.yml
              include_vars: 
                file: "./group_vars/overlay_db.yml"
                name: overlay_db_vars

            - name: Get access-side VLANs
              set_fact: 
                vlan_all_list: "{{ (vlan_all_list | default([])) + [ item ] }}"
              when: overlay_db_vars['vlans'][item]['vlan_type'] == 'access'
              loop: "{{ overlay_db_vars.vlans.keys() }}"  

          - name: Collect VLANs
            when: playbook_mode == '-inc'
            set_fact: 
              vlan_all_list: "{{ access_interfaces | default([]) }}"

          - name: Load variables from /host_vars/access_intf/<hostname>.yml if present
            block:
            - name: Check whether host_vars/access_intf/<hostname>.yml is present
              local_action: stat path="./host_vars/access_intf/{{ inventory_hostname }}.yml"
              register: acc_file_state
              become: no 
              
            - name: Load vars from /host_vars/access_intf/<hostname>.yml
              include_vars:
                file: "./host_vars/access_intf/{{ inventory_hostname }}.yml"
                name: access_intf_vars
              when: acc_file_state.stat.exists

          # Following tasks are skippped if host_vars/access_intf/<hostname>.yml is not present

          - name: Process interfaces
            when: (access_intf_vars is defined) and (access_intf_vars.access_interfaces is defined)
            block:
            - name: Process access interfaces data
              access_intf_preprocess:
                access_interfaces: "{{ access_intf_vars.access_interfaces }}"
                vlan_overlay_db: "{{ vlan_all_list | default([]) }}"
              register: access_intf_output

            - name: Configure trunk interfaces 
              cisco.ios.ios_l2_interfaces:
                config:
                - name: "{{ item.name }}"
                  mode: trunk
                  trunk:
                    allowed_vlans: "{{ item.vlans }}"
                state: merged
              loop: "{{ access_intf_output.trunks | default([]) }}"  

            - name: Apply no shutdown on interfaces
              cisco.ios.ios_config:
                lines:
                - no shutdown
                parents: interface {{ item.name }}
              loop: "{{ access_intf_output.trunks | default([]) }}"

            - name: Configure access interfaces
              cisco.ios.ios_l2_interfaces:
                config:
                - name: "{{ item.name }}"
                  mode: access
                  access:
                    vlan: "{{ item.vlans }}"
                state: merged
              loop: "{{ access_intf_output.access | default([]) }}"

            - name: Apply no shutdown on interfaces
              cisco.ios.ios_config:
                lines:
                - no shutdown
                parents: interface {{ item.name }}
              loop: "{{ access_intf_output.access | default([]) }}"
