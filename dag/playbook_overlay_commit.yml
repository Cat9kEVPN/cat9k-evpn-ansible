---

- name: Automated VXLAN deployment with BGP EVPN L2/L3 underlay w/ Spine
  hosts: all
  gather_facts: no
  vars:
    save_configuration: false

  tasks:

          # Set db file path and load overlay_db
          - name: Load and process overlay input file
            run_once: true
            block:
            - name: set overlay db input file path if not already set
              when: input_vars_path is not defined
              set_fact: 
                input_vars_path: "./"

            - name: Load vars from overlay input file
              include_vars: 
                file: "{{ input_vars_path }}group_vars/overlay_db.yml"

            - name: Check for IPv6 config under VRFs
              set_fact: 
                ipv6_unicast: 'enable'
              when: '"ipv6" in item.value.afs and ipv6_unicast is not defined'
              with_dict: "{{ vrfs }}"

          - name: Load vars from node_vars/<host>.yml input file
            include_vars: 
              file: "{{ input_vars_path }}host_vars/node_vars/{{ inventory_hostname }}.yml"

          - name: Enabling IPv6 Unicast routing
            when: ipv6_unicast is defined and ipv6_unicast == 'enable'
            cisco.ios.ios_config:
              lines: ipv6 unicast-routing

          - name: Configure vrf definition
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', '../templates/vrf_definition.j2') }}"
              diff_match: none 
            register: result

          - name: Configure neighbors globally for BGP
            cli_config:
              config: "{{ lookup('template', '../templates/bgp_global.j2') }}"
              diff_match: none
            register: result
          
          - name: Activate BGP neighbor under L2VPN/EVPN AFI/SAFI
            cli_config:
              config: "{{ lookup('template', '../templates/bgp_l2vpn_evpn_af.j2') }}"
              diff_match: none
            register: result

          - name: Activate BGP for AF(ipv4/ipv6) per vrf
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', '../templates/bgp_l2vpn_ipv46_per_vrf.j2') }}"
              diff_match: none
            register: result
          
          - name: Create access/Core VLAN
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', '../templates/vlan_create.j2') }}"
              diff_match: none 
            register: result

          - name: Create SVI
            when: inventory_hostname in groups['leaf'] 
            cli_config:
              config: "{{ lookup('template', '../templates/svi_create.j2') }}"
              diff_match: none 
            register: result            
          
          - name: Configure global L2VPN EVPN
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', '../templates/l2vpn_evpn_global.j2') }}"
              diff_match: none 
            register: result

          - name: Create EVPN EVI
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', '../templates/l2vpn_evpn_evi_create.j2') }}"
              diff_match: none 
            register: result
          
          - name: Stitch EVI/VNI/VLAN
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', '../templates/evi_vni_vlan_stiching.j2') }}"
              diff_match: none 
            register: result

          - name: Create overlay interface
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', '../templates/overlay_interfaces.j2') }}"
              diff_match: none 
            register: result
          
          - name: Configure NVE interface
            when: inventory_hostname in groups['leaf']
            cli_config:
              config: "{{ lookup('template', '../templates/nve_create.j2') }}"
              diff_match: none 
            register: result          

          - name: Pause for 60 seconds for convergence  
            wait_for:
              delay: 60
              timeout: 0
          
          - name: Save the configurations in the device
            when: save_configuration
            cli_command:
              command: write memory
            register: result
