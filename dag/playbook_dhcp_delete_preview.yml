---

- name: Disable DHCP for EVPN overlay
  hosts: leaf
  gather_facts: no

  vars:
    input_vars_path: "./"
    dhcp_block: ''
    playbook_mode: '-del'
    playbook_name: "dhcp"

    action: 'delete'

  tasks:

  ## List of tasks block
  ##--------------------
  # 1) Load input files
  # 2) Collect overlay data ( to get VRFs and SVIs )
  # 3) Collect and process VRFs from dhcp_db.yml ( to extract respective SVIs from devices )
  # 4) Collect SVIs of the VRFs of interest and filtered already configured SVIs
  # 5) Call template files
  ##--------------------


  # ------ 1) load input files --------

            - name: Load and process DHCP input file
              run_once: true
              block:

              - name: Load vars from dhcp_db.yml
                include_vars: 
                  file: "{{ input_vars_path }}group_vars/dhcp_db.yml"
                  name: dhcp_db_vars

              - name: Load vars from dhcp_delete_vars.yml
                include_vars: 
                  file: "{{ input_vars_path }}group_vars/dhcp_delete_vars.yml"
                  name: dhcp_delete_vars

              - name: Initialise variables
                set_fact:
                  dhcp: {}
                  config_dhcp_header: false


  # ------ 2) Collect overlay data ( to get VRFs and SVIs ) --------

            - name: Get overlay details from show run nve
              block:
              #- name: Run and parse show run nve
              #  ansible.utils.cli_parse:
              #    command: "show run nve"
              #    parser:
              #      name: ansible.netcommon.pyats
              #    set_fact: overlay_dict

              ########## Replace with genie parser

              - name: Collect "show run nve"
                cli_command:
                  command: show run nve
                register: nve_output

              - name: Call python module to parse NVE output
                sh_run_nve_parse:
                  command_output: "{{ nve_output.stdout }}"
                register: nve_parsed

              - set_fact:
                  overlay_dict: "{{ nve_parsed.parsed }}"

              ########## Replace with genie parser

              - name: Collect "show run | sec dhcp"
                cli_command:
                  command: show run | sec dhcp
                register: dhcp_output

              - set_fact:
                  overlay_vrf_dict: "{{ overlay_dict.vrf | default({}) }}"
              
              - set_fact:
                  config_dhcp_header: true
                when: overlay_vrf_dict == {}


  # ------ 3) Collect and process VRFs from dhcp_db.yml ( to extract respective SVIs from devices ) --------

            ## Get all VRFs mentioned in dhcp_db.yml and
            ## filter VRFs that are not in the device: vrfs ignored if overlay is not configured

            - name: Collect all VRFs from dhcp_db.yml
              set_fact: 
                all_dhcp_vrfs: "{{ dhcp_db_vars.dag.keys() | get_vrf_list(overlay_vrf_dict.keys()) }}"

            ## Get only VRFs of interest 
            - name: Collect only VRFs of interest
              block:
              - set_fact: 
                  all_vrfs: "{{ dhcp_delete_vars.dag | get_vrf_list(all_dhcp_vrfs) }}"

              - set_fact:
                  config_dhcp_header: true
                when: all_dhcp_vrfs | difference(all_vrfs) == []


  # ------ 4) Collect SVIs of the VRFs of interest and filtered already configured SVIs --------

            - name: Collect unconfigured SVIs of the VRFs of interest
              block:
              - name: Call python module to assign relay src interface
                dhcp_preprocess:
                  vrfs_svis_dict: "{{ {
                    'all_vrfs': all_vrfs,
                    'overlay_svis_dict': overlay_dict.svis | default({}),
                    'dhcp_options': dhcp_db_vars.dhcp_options,
                    'dhcp_output': dhcp_output.stdout_lines,
                    'config_dhcp_header': config_dhcp_header } }}"
                register: svis_dhcp_header

              - set_fact:
                  dhcp: "{{ dhcp | combine ( { 'svis': svis_dhcp_header.filtered_svis | default({}) } ) }}"
                  config_dhcp_header: "{{ svis_dhcp_header.config_dhcp_header }}"

              - set_fact:
                  dhcp: "{{ dhcp | combine ( { 'dhcp_options': dhcp_db_vars.dhcp_options | default({}) } ) }}"
                when: config_dhcp_header == true


  # ------ 5) Call template files --------

            - name: Read DHCP configuration template
              set_fact:
                dhcp_block: "! dhcp block {{ lookup('template', '../templates/dhcp_overlay.j2') }}"
                
            - name: Write to preview files
              include_tasks: ../subtasks/common_subtasks/subtask_write_to_preview_file.yml


- name: Display output info
  hosts: localhost
  gather_facts: no
  run_once: True

  tasks:
            - debug:
                msg: Please refer to <hostname>-del-dhcp.txt in 'preview_files' folder
