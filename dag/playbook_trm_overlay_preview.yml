---
- name: Enable TRM for EVPN overlay
  hosts: all
  gather_facts: no

  vars:
    input_vars_path: './'
    trm_block: ''
    playbook_mode: ''
    playbook_name: 'trm'
    avoid_force_reconfig: true      # when set to false, reconfigs TRM configs under the DAGs

    trm_inc: false
    design: false

    leaf_trm_dict:
      '../templates/rp_interfaces_trm.j2': 'RP loopback block'
      '../templates/vrf_definition_trm.j2': 'vrf block'
      '../templates/pim_interfaces_trm.j2': 'pim interface block'

    bgp_mvpn_dict:
      '../templates/bgp_mvpn_af_trm.j2': 'bgp neighbor mvpn af block'


  tasks:
    
  ## List of tasks block
  ##--------------------
  # 1) load input files
  # 2) Get RP loopbacks data from trm_overlay_db for the VRFs of interest
  # 3) Get overlay data and filter non-existing (overlay unconfigured) VRFs
  # 4) Filter already-TRM-enabled VRFs to avoid reconfig when avoid_force_reconfig is true
  # 5) Get SVIs and MVPN AFs for the filtered VRFs
  # 6) Filter out already configured RP loopbacks
  # 7) Write MVPN AFs per leaf to temp file to get MVPN AFs for spine
  # 8) Get L2VPN AF neighbors to configure MVPN AFs neighbors
  # 9) Call template files
  ##--------------------


  # ------ 1) load input files --------

            - name: Load and get TRM data from TRM input file
              block:

              # leaf_group and spine_group are defined in this subtask
              - name: Get inventory groups
                include_tasks: ../subtasks/common_subtasks/subtask_get_inventory_group.yml

              - name: Initialise variables
                run_once: true
                set_fact: 
                  vrfs: {}
                  bgp: {}
                  svis: []
                  vrf_mvpn: []
                  vrf_mvpn_spine: []
                  collect_svis_af_once: false

              - set_fact:
                  collect_svis_af_once: true        # Collect svi from overlay_db once
                  avoid_force_reconfig: false       # Do not check in the host for already-TRM-enabled VRFs
                when: design != false 

              # vrfs_unfiltered, trm_db_vars, and trm_create_vars are defined in this subtask
              - name: Load variables from trm_overlay_db.yml (and trm_create_vars.yml) input file
                include_tasks: ../subtasks/trm_subtasks/subtask_load_trm_input_files.yml


  # ------ 2) Get RP loopbacks data from trm_overlay_db for the VRFs of interest --------

            - name: Get RP loopbacks info from trm_overlay_db for VRFs
              when: vrfs_unfiltered != {}
              run_once: true
              block:

              - name: Collect RP loopbacks info from trm_overlay_db.yml
                trm_preprocess:
                  vrf_trm_info: "{{ {'vrfs': vrfs_unfiltered, 'inventory_leafs': leaf_group } }}"
                register: processed_trm_db

              - set_fact: 
                  #vrf_mvpn: "{{ processed_trm_db.vrf_mvpn }}"
                  rp_interface_dict: "{{ processed_trm_db.rp_intf }}"
                  rp_for_hosts_dict: "{{ processed_trm_db.rp_loopbacks }}"
                  
            - set_fact:
                vrfs_unfiltered: "{{ vrfs_unfiltered.keys() | list }}"
              run_once: true
                

  # ------ 3) Get overlay data and filter non-existing (overlay unconfigured) VRFs --------

            - name: Collect overlay data and filter unconfigured VRFs
              when: vrfs_unfiltered != []
              block:

              # ------------------ Design ----------------#

              # Get overlay data from overlay_db incase of sample_design
              - name: Collect overlay data from overlay_db.yml
                when: design != false
                run_once: true
                block:

                - name: Load vars from overlay_db.yml
                  include_vars: 
                    file: "{{ input_vars_path }}group_vars/overlay_db.yml"
                    name: overlay_dict

                - name: Filter non-existing VRFs 
                  set_fact:
                    vrfs_filtered: "{{ vrfs_unfiltered | intersect(overlay_dict.vrfs | default({})) }}"
                  
              # ------------------------------------------#


              # -------------- Not design ----------------#

              # Get overlay data from device
              - name: Collect overlay data from device
                when: design == false and inventory_hostname in leaf_group
                block:

                #- name: Run and parse show run nve
                #  ansible.utils.cli_parse:
                #    command: "show run nve"
                #    parser:
                #      name: ansible.netcommon.pyats
                #    set_fact: overlay_dict

                ########## Replace with genie parser

                - name: Collect "show run nve"
                  cli_command:
                    command: show run nve
                  register: nve_output

                - name: Call python module to parse NVE output
                  sh_run_nve_parse:
                    command_output: "{{ nve_output.stdout }}"
                  register: nve_parsed

                - set_fact:
                    overlay_dict: "{{ nve_parsed.parsed }}"

                ########## Replace with genie parser

                - name: Filter non-existing VRFs
                  set_fact:
                    vrfs_filtered: "{{ vrfs_unfiltered | intersect( overlay_dict.vrf | default({}) ) }}"

              # ------------------------------------------#


  # ------ 4) Filter already-TRM-enabled VRFs to avoid reconfig when avoid_force_reconfig is set to true ------

            - name: Get TRM- VRFs dictionary from device and filter them out if TRM is already configured
              when: inventory_hostname in leaf_group
              block:

              # Filter the already-trm-enabled VRFs using overlay output
              # Skipped when design != false i.e, run from config_example: avoid_force_reconfig == false
              - name: Get not-trm-enabled VRFs from the device
                when: avoid_force_reconfig == true
                block:
                - trm_preprocess:
                    config_vrf_info: "{{ {
                      'vrf_dict': overlay_dict.vrf, 
                      'db_dict': trm_db_vars.dag, 
                      'vrf_interested': vrfs_filtered } }}"
                  register: vrfs_unconfig_dict

                - set_fact:
                    vrfs_unconfig: "{{ vrfs_unconfig_dict['vrfs_unconfig'] }}"

              - name: Set all VRFs as not-trm-enabled VRFs
                when: avoid_force_reconfig == false
                set_fact:
                  vrfs_unconfig: "{{ vrfs_filtered }}"


  # ------ 5) Get SVIs and MVPN AFs for the filtered VRFs --------

            # Following tasks in the block are skippped if all VRFs are trm-enabled
            ## add new node doesn't work with design

            - name: Filter MVPN AFs, SVI dictionary for filtered VRFs
              when: inventory_hostname in leaf_group
              run_once: "{{ collect_svis_af_once }}"
              block:

              # Get MVPN AFs for vrfs_filtered and not vrfs_unconfig - irrespective of whether VRFs are already TRM-configured
              - name: Get MVPN AFs
                set_fact:
                  vrf_mvpn:  "{{ vrfs_filtered | get_mvpns_afs(trm_db_vars) }}"

              - name: Get TRM data from db for unconfigured VRFs
                set_fact:
                  vrfs: "{{ vrfs_unconfig | get_dag_data_from_db(trm_db_vars.dag) }}"
            
              - name: Collect SVIs from overlay_db/device
                set_fact:
                  svis: "{{ overlay_dict.svis | filter_dict_for_vrfs(vrfs) }}"


  # ------ 6) Filter out already configured RP loopbacks --------

            - name: Collect unconfigured RP loopbacks
              when: inventory_hostname in leaf_group
              block:

              - name: Run and parse show run | sec ^interface
                ansible.utils.cli_parse:
                  command: "show run | sec ^interface"
                  parser:
                    name: ansible.netcommon.pyats
                  set_fact: interface_dict

              - name: Get RP loopbacks for each host - filter out loopbacks of unwanted VRFs
                set_fact:
                  filtered_rp_loopbacks: "{{ ( rp_for_hosts_dict[inventory_hostname] | default([]) )
                  | intersect( rp_interface_dict | filter_dict_for_vrfs(vrfs_filtered) | list ) }}" # filter out loopbacks of unwanted VRFs

              - name: Get unconfigured RP loopbacks if any
                set_fact:
                  rp_loopbacks: "{{ 
                    filtered_rp_loopbacks | default([]) | difference(interface_dict['interfaces'].keys()) }}"

              - name: Get RP loopbacks for each host to enable PIM-Sparse mode - filter out TRM-configured VRFs and add unconfig'd RP loopbacks
                set_fact:
                  pim_rp_loopbacks: "{{ ( ( ( rp_for_hosts_dict[inventory_hostname] | default([]) )
                  | intersect( rp_interface_dict | filter_dict_for_vrfs(vrfs) | list ) ) 
                  + rp_loopbacks ) | unique }}"


  # ------ 7) Write MVPN AFs per leaf to temp file to get MVPN AFs for spine  ------

              # VRFs list is filtered with show run nve output and is specific per host, 
              # so MVPN AFs could be different per leaf

            # Skipped when design != false i.e, run from config_example
            
            # -------------- Not design ----------------#
            - name: Compare MVPN AFs across device
              when: design == false
              block:

              - name: Write MVPN data to temporary files
                include_tasks: ../subtasks/trm_subtasks/subtask_store_hosts_vrf_data.yml

              # Collect MVPN AFs on all leafs for configuring MVPN AFs on spine
              - name: Process VRFs' address families of all devices
                when: all_leaf_mvpn_data != {}
                block:
                - set_fact: 
                    vrf_mvpn_spine: "{{ ( vrf_mvpn_spine + item.value ) | unique }}"
                  with_dict: "{{ all_leaf_mvpn_data }}"

            # ------------------ Design ----------------#
            - name: Set MVPN AFs for spine - config-example (design != false)
              when: design != false
              set_fact: 
                vrf_mvpn_spine: "{{ vrf_mvpn }}"


 # ------ 8) Get L2VPN AF neighbors to configure MVPN AFs neighbors --------

            # Following tasks in the block are skippped for 
            # spine if all VRFs in all devices are trm-enabled
            # and for leaf if all VRFs in that host are trm-enabled

            - name: Collect BGP AFs from host_vars/node_vars/<hostname>.yml / device
              when: (
                inventory_hostname in leaf_group and vrf_mvpn != [] ) or (
                inventory_hostname in groups['spine'] and vrf_mvpn_spine != [])
              block:

              # Set MVPN AFs and RRC for spine
              - name: Get BGP AFs details
                when: inventory_hostname in groups['spine']
                set_fact:
                  vrf_mvpn: "{{ vrf_mvpn_spine }}"
                  bgp: "{{ bgp | combine({ 'rrc': 'true' }) }}"

              # bgp and mvpn are defined in this subtask
              - name: Get BGP neighbors and assign them for MVPN AFs
                include_tasks: ../subtasks/trm_subtasks/subtask_bgp_mvpn_neighbors.yml


# ------ 9) Call template files --------

            - name: Read leaf-only config template files
              when: inventory_hostname in leaf_group
              set_fact:
                trm_block: "{{ trm_block }}! {{ leaf_trm_dict[item.key] }} {{ lookup('template', item.key ) }}"
              with_dict: "{{ leaf_trm_dict }}"

            - name: Read BGP neighbor MVPN AF template files
              when: inventory_hostname in leaf_group + spine_group
              set_fact:
                trm_block: "{{ trm_block }}! {{ bgp_mvpn_dict[item.key] }} {{ lookup('template', item.key ) }}"
              with_dict: "{{ bgp_mvpn_dict }}"

            - name: Write to preview files
              include_tasks: ../subtasks/common_subtasks/subtask_write_to_preview_file.yml


- name: Display output file info
  hosts: localhost
  gather_facts: no
  run_once: True
  vars:
    playbook_mode: ''

  tasks:
            - debug:
                msg: Please refer to <hostname>{{ playbook_mode }}-trm.txt in 'preview_files' folder
