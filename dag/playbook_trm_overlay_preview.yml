---

- name: Enable TRM for EVPN overlay
  hosts: all
  gather_facts: no
  vars:
    playbook_mode: ''
    collect_rp_afs_once: false
    check_vrfs_4_trm: true      # when set to false, reconfigs TRM configs under the DAGs
    trm_block: ''
    leaf_trm_dict:
      '../templates/vrf_definition_trm.j2': 'vrf block'
      '../templates/pim_interfaces_trm.j2': 'pim interface block'
    # design: true

  tasks:
    
# ------ load input files --------

            - name: Load and process TRM input file
              run_once: True
              block:

              # Set db file path and load trm_overlay_db
              - name: set TRM input file path if not already set
                when: input_vars_path is not defined
                set_fact: 
                  input_vars_path: "./"

              - name: Load vars from trm_overlay_db.yml
                include_vars: 
                  file: "{{ input_vars_path }}group_vars/trm_overlay_db.yml"
                  name: trm_db_vars

              - set_fact: 
                  vrfs: {}

              # Get VRFs from trm_overlay_db if playbook_trm_preview.yml - already config'd VRFs are to be filtered later
              - name: Get VRFs from trm_overlay_db.yml
                when: trm_inc is not defined
                set_fact: 
                  vrfs_unfiltered: "{{ trm_db_vars.vrfs }}"
                  
              # Get VRFs from trm_create_vars.yml if playbook_trm_incremental_preview.yml - already config'd VRFs are to be filtered later
              - name: Get VRfs from trm_create_vars.yml
                when: trm_inc is defined and trm_inc == true
                
                block:
                - set_fact:
                    playbook_mode: '-inc'

                - name: Load vars from trm_create_vars.yml
                  include_vars: 
                    file: "{{ input_vars_path }}group_vars/trm_create_vars.yml"
                    name: trm_create_vars

                - name: Get desired VRFs data from trm_overlay_db.yml
                  when: "'all' not in trm_create_vars.dag"
                  set_fact: 
                    vrfs_unfiltered: "{{ vrfs_unfiltered | default({}) | combine ( {item: trm_db_vars.vrfs[item]} ) }}"
                  loop: "{{ trm_create_vars.dag }}"

                # Get VRFs from trm_overlay_db if key is 'all'
                - name: Get all VRF data from trm_overlay_db.yml
                  when: "'all' in trm_create_vars.dag"
                  set_fact:
                    vrfs_unfiltered: "{{ trm_db_vars.vrfs.keys() | list }}"
                    collect_rp_afs_once: false


# ------ Get SVIs, RP loopback, VRF addr families (from trm_overlay_db), and filter already-trm-enabled VRFs --------

            # Get overlay data
            - name: Get overlay data to collect VRFs and SVIs data
              when: inventory_hostname in groups['leaf']
              block:
              
              # Get overlay data from device
              - name: Get overlay data from sh_run_nve
                when: design is not defined
                block:
                - name: Run and parse show run nve
                  ansible.utils.cli_parse:
                    command: "show run nve"
                    parser:
                      name: ansible.netcommon.pyats
                    set_fact: overlay_dict

                # Filter already-trm-enabled VRFs by checking whether mdt_auto_discovery is defined
                - name: Get already-trm-enabled VRFs and filter
                  block: 
                  - name: Initialise list
                    set_fact:
                      vrf_configd: []

                  - name: Collect trm-enabled VRFs from the device
                    when: check_vrfs_4_trm == true
                    block:
                    - set_fact:
                        vrf_configd: "{{ vrf_configd + [ item.key ] }}"
                      when: ('ipv4' in item.value.address_family and 'mdt_auto_discovery' in item.value.address_family.ipv4) or ('ipv6' in item.value.address_family and 'mdt_auto_discovery' in item.value.address_family.ipv6)
                      with_dict: "{{ overlay_dict.vrf }}"

                  - name: Filter trm-enabled VRFs 
                    set_fact:
                      vrfs_filtered: "{{ vrfs_unfiltered | difference(vrf_configd) }}"

                  - name: Get filtered(not-yet-trm-enabled) VRFs' TRM data from trm_overlay_db.yml
                    set_fact: 
                      vrfs:  "{{ vrfs | combine ( {item: trm_db_vars.vrfs[item]} ) }}"
                    loop: "{{ vrfs_filtered }}"

                  # Write TRM-unconfigured VRFs to temp file - to see whether VRF list is same on all device
                  # VRFs list is filtered from host CLI output and is specific per host
                  - name: Store TRM-unconfigured VRFs for all hosts in a variable
                    block:
                    - name: Create temporary file
                      run_once: true
                      ansible.builtin.tempfile:
                        state: file
                        suffix: tmp_vrf.yml
                      register: tmp_vrf

                    - name: Write TRM-unconfigured VRFs hosts to temporary file
                      when: vrfs != {}
                      lineinfile:
                        dest: "{{ tmp_vrf.path }}"
                        line: "{{ inventory_hostname }} : {{ vrfs.keys() }}"
                        insertafter: EOF

                    - name: Load vars from temporary file
                      run_once: true
                      include_vars: 
                        file: "{{ tmp_vrf.path }}"
                        name: trm_unconfig_vrf

                    - name: Remove the temporary file
                      run_once: true
                      file:
                        path: "{{ tmp_vrf.path }}"
                        state: absent
                      when: tmp_vrf.path is defined

                  # Check whether VRF list is same on all device, if so, process the VRF data from trm_overlay_db only once
                  - name: Check whether TRM-unconfigured VRFs are same in all hosts
                    when: vrfs != {}
                    run_once: true
                    block:
                    - set_fact:
                        trm_unconfig_vrf_list: "{{ trm_unconfig_vrf.keys() | list }}"

                    - set_fact:
                        vrf_ref: "{{ trm_unconfig_vrf[trm_unconfig_vrf_list[0]] }}"

                    - set_fact:
                        collect_rp_afs_once: false
                      when: vrf_ref != item.value and collect_rp_afs_once == true
                      with_dict: "{{ trm_unconfig_vrf }}"

              # Get overlay data from overlay_db incase of sample_design
              - name: Get overlay data from overlay_db.yml
                run_once: true
                when: design is defined
                block:
                - name: Load vars from overlay_db.yml
                  include_vars: 
                    file: "{{ input_vars_path }}group_vars/overlay_db.yml"
                    name: overlay_dict

                - set_fact:
                    vrfs: "{{ vrfs_unfiltered }}"
                    trm_unconfig_vrf: "{{ vrfs_unfiltered }}"
                        
              # Following tasks in the block are skippped if all VRFs are trm-enabled
              - name: Collect SVIs from overlay_db or device
                when: vrfs != {}
                block:
                # Get SVIs from device
                - name: Initialise svi dictionary
                  run_once: true
                  set_fact: 
                    svis: []

                - name: Collect SVIs from device
                  when: design is not defined
                  block:
                  - name: Collect SVIs from the overlay data 
                    set_fact:
                      svis: "{{ svis | default([]) + [ item.key ] }}"
                    when: item.value.vrf in vrfs
                    with_dict: "{{ overlay_dict.svis }}"

                # Get SVIs from overlay_db
                - name: Collect SVIs from overlay_db
                  when: design is defined
                  run_once: true
                  block:
                  - name: Collect SVIs from the overlay data 
                    set_fact:
                      svis: "{{ svis | default([]) + [ item.key ] }}"
                    when: item.value.vrf in vrfs
                    with_dict: "{{ overlay_dict.svis }}"

                # Get RP loopbacks and AFs from trm_overlay_db for filtered VRFs
                # Ran once when VRFs-to-be-TRM-enabled list is same for all hosts
                - name: Collect RP loopbacks and VRFs AFs from trm_overlay_db.yml
                  run_once: "{{ collect_rp_afs_once }}"
                  block:
                  - trm_preprocess:
                      vrf_trm_info: "{{ {'vrfs': vrfs, 'inventory_leafs': groups['leaf']} }}"
                    register: processed_trm_db

                  - set_fact: 
                      vrf_mvpn: "{{ processed_trm_db.vrf_mvpn }}"
                      rp_intf: "{{ processed_trm_db.rp_intf }}"
                      all_rp_loopbacks: "{{ processed_trm_db.rp_loopbacks }}"

                  # Write AFs of filtered VRFs (if VRFs list is different among the hosts) per device to temp file - for configuring MVPN AFs on spine
                  - name: Store VRF AFs to temp file
                    when: collect_rp_afs_once == false
                    block:
                    - name: Create temporary file
                      run_once: true
                      ansible.builtin.tempfile:
                        state: file
                        suffix: tmp_trm_mvpn.yml
                      register: tmp_trm_mvpn

                    - name: Write VRF AFs to temporary file
                      lineinfile:
                        dest: "{{ tmp_trm_mvpn.path }}"
                        line: "{{ inventory_hostname }} : {{ vrf_mvpn }}"
                        insertafter: EOF

                    - name: Get MVPN AFs to be assigned from temporary file
                      run_once: true
                      block:
                      - name: Load vars from temporary file
                        include_vars: 
                          file: "{{ tmp_trm_mvpn.path }}"
                          name: trm_mvpn_all

                      - name: Remove the temporary file
                        file:
                          path: "{{ tmp_trm_mvpn.path }}"
                          state: absent
                        when: tmp_trm_mvpn.path is defined

                      # MVPN AFs to be configured on spine
                      - name: Process VRFs' address families of all devices
                        block:
                        - set_fact:
                            vrf_mvpn_spine: []

                        - set_fact: 
                            vrf_mvpn_spine: "{{ vrf_mvpn_spine + item.value }}"
                          with_dict: "{{ trm_mvpn_all }}"

                        # Remove duplicate entries
                        - set_fact: 
                            vrf_mvpn_spine: "{{ vrf_mvpn_spine | unique }}"

                # Filter out already existing rp loopbacks
                - name: Run and parse show run | sec ^interface
                  ansible.utils.cli_parse:
                    command: "show run | sec ^interface"
                    parser:
                      name: ansible.netcommon.pyats
                    set_fact: interface_dict

                - name: Get unconfigured RP loopbacks if any
                  set_fact: 
                    lpbk_to_be_configd: "{{ all_rp_loopbacks[inventory_hostname] | default([]) | difference(interface_dict['interfaces'].keys()) }}"
                  

# ------ Get BGP AFs detail per device to configure MVPN AF--------

            # Following tasks in the block are skippped for spine if all VRFs in all devices are trm-enabled
            # and skipped for leaf if all VRFs in that host are trm-enabled

            - name: Collect BGP AFs from host_vars/node_vars/<hostname>.yml or device
              when: (inventory_hostname in groups['leaf'] and vrfs != {}) or (inventory_hostname in groups['spine'] and trm_unconfig_vrf != {})
              block:

              # Get BGP data from device and compare l2vpn family with bgp mvpn addr family
              - name: Get BGP AFs details
                block:
                # Set MVPN AFs for spine
                - name: Get BGP AFs details
                  when: inventory_hostname in groups['spine']
                  set_fact:
                    vrf_mvpn: "{{ vrf_mvpn_spine }}"

                # Get BGP data from device
                - name: Get BGP details from show run | sec bgp 
                  when: design is not defined
                  block:

                  - name: Run and parse show run | sec bgp
                    ansible.utils.cli_parse:
                      command: "show run | sec bgp"
                      parser:
                        name: ansible.netcommon.pyats
                      set_fact: bgp_parsed

                  # Get L2VPN addr family neighbors and set it as MVPN AF neighbors
                  - name: Collect L2VPN addr family neighbor from show run | sec bgp output
                    block:
                    - set_fact: 
                        bgp_list: "{{ bgp_parsed.bgp | dict2items }}"

                    - set_fact:
                        neighbors: "{{ bgp_list[0].value.address_family['l2vpn evpn'].address_family_neighbor.keys() | list }}"

                    - name: Set L2VPN addr family neighbor as MVPN AF neighbors
                      block:
                      - set_fact:
                          bgp: {}

                      - set_fact:
                          bgp: "{{ bgp | default({}) | combine({ 'as_number': bgp_list[0].value.as_number | string }) }}"
                    
                      - set_fact:
                          bgp: "{{ bgp | default({}) | combine({ item+'_mvpn_neighbors': neighbors }) }}"
                        loop: "{{ vrf_mvpn }}"

                  # Initialise configured_mvpn list
                  - set_fact:
                      configured_mvpn: []
                    run_once: true

                  # Get MVPN addr families that are already configured on the device
                  - name: Collect already-configured MVPN AFs
                    set_fact:
                      configured_mvpn: "{{ configured_mvpn | default([]) + [ item ] }}"
                    when: "(item + ' mvpn' in bgp_parsed.bgp[bgp.as_number].address_family)"
                    loop: "{{ vrf_mvpn }}"

                  # Compare MVPN addr family with L2VPN addr family neighbors and filter out already-configured neighbors
                  - name: Compare L2VPN AF neighbors with configured MVPN AFs neighbors for the already-configured MVPN AFs
                    set_fact:
                      bgp: "{{ bgp | default({}) | combine({item+'_mvpn_neighbors': (bgp[item+'_mvpn_neighbors'] | difference(bgp_parsed.bgp[bgp.as_number].address_family[item+' mvpn'].address_family_neighbor.keys() | list )) }) }}"
                    when: "'address_family_neighbor' in bgp_parsed.bgp[bgp.as_number].address_family[item+' mvpn']"
                    loop: "{{ configured_mvpn }}"

                  # Filter already configured MVPN AFs (all neighbors from L2VPN AFs are configured)
                  - name: Get unconfigured MVPN AFs if any
                    set_fact:
                      mvpns: "{{ mvpns | default([]) + [ item ] }}"
                    when: "(bgp[item + '_mvpn_neighbors'] != [])"
                    loop: "{{ vrf_mvpn }}"

                # Get BGP data from host_vars/node_vars/<hostname>.yml incase of sample_design
                - name: Get BGP details from host_vars/node_vars/<inventory>.yml
                  when: design is defined
                  block:
                  - name: Load vars from host_vars/node_vars/<inventory>.yml
                    include_vars:
                      file: "{{ input_vars_path }}host_vars/node_vars/{{ inventory_hostname }}.yml"
                      name: bgp_vars

                  - name: Collect BGP neighbors from host_vars/node_vars/<inventory>.yml
                    block:
                    - set_fact:
                        mvpns: "{{ vrf_mvpn }}"
                        neighbors: "{{ bgp_vars.bgp.neighbors.keys() | list }}"

                    - name: Set BGP neighbors host_vars/node_vars/<inventory>.yml as MVPN AF neighbors
                      block:
                      - set_fact:
                          bgp: {}

                      - set_fact:
                          bgp: "{{ bgp | default({}) | combine({ 'as_number': bgp_vars.bgp.as_number }) }}"
                          
                      - set_fact:
                          bgp: "{{ bgp | default({}) | combine({ item+'_mvpn_neighbors': neighbors }) }}"
                        loop: "{{ vrf_mvpn }}"


# ------ Call template files --------

            # Following tasks in the block are skippped for spine if all VRFs in all devices are trm-enabled
            # and skipped for leaf if all VRFs in that host are trm-enabled

            - name: Read leaf-only config template files
              when: vrfs != {} and inventory_hostname in groups['leaf']
              block:
              - name: Read RP Loopback template files
                when: lpbk_to_be_configd != []
                set_fact:
                  trm_block: "{{ trm_block }}! RP loopback block {{ lookup('template', '../templates/rp_interfaces_trm.j2' ) }}"

              - name: Get RP loopbacks to enable PIM-Sparse mode
                set_fact:
                  rp_loopbacks: "{{ all_rp_loopbacks[inventory_hostname] }}"
                when: inventory_hostname in all_rp_loopbacks

              - set_fact:
                  trm_block: "{{ trm_block }}! {{ leaf_trm_dict[item.key] }} {{ lookup('template', item.key ) }}"
                with_dict: "{{ leaf_trm_dict }}"

            - name: Spines-only configs
              when: inventory_hostname in groups['spine'] and trm_unconfig_vrf != {}
              block:
              - name: Set spines as RRC
                set_fact:
                  bgp: "{{ bgp | default({}) | combine({ 'rrc': 'true' }) }}"

              - name: Enable IPv6 routing on spine
                when: "'ipv6' in vrf_mvpn"
                set_fact:
                  trm_block: "{{ trm_block }}! routing block\nipv6 unicast-routing"

            - name: Read BGP neighbor MVPN AF template files
              when: mvpns is defined and mvpns != []
              set_fact:
                trm_block: "{{ trm_block }}! bgp neighbor mvpn af block {{ lookup('template', '../templates/bgp_mvpn_af_trm.j2' ) }}"

            - name: Render template files output
              set_fact:
                rendered: "{{  trm_block | regex_replace('#jinja2: lstrip_blocks: \"True\", trim_blocks: \"True\"', '') | regex_replace('\\n(\\s+)','\n') | regex_replace('! ','\n\n! ') }}"

            - name: Copy configurations to respective file ( <inventory_hostname>{-inc}-trm.txt ) under 'preview_files' folder
              copy:
                dest: preview_files/{{inventory_hostname}}{{ playbook_mode }}-trm.txt
                content: "{{ rendered }}"


- name: Display output file info
  hosts: localhost
  gather_facts: no
  run_once: True
  vars:
    playbook_mode: ''

  tasks:
            - name: Check playbook mode
              when: trm_inc is defined and trm_inc == true
              set_fact:
                playbook_mode: '-inc'
        
            - debug:
                msg: Please refer to <hostname>{{ playbook_mode }}-trm.txt in 'preview_files' folder
