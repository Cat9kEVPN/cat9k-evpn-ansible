---

- name: Enable TRM for EVPN overlay
  hosts: all
  gather_facts: no
  vars:
    vrfs: {}
    playbook_mode: ''
    trm_block: ''
    leaf_trm_dict:
      '../templates/vrf_definition_trm.j2': 'VRF block'
      '../templates/pim_interfaces_trm.j2': 'PIM interface block'
      '../templates/rp_interfaces_trm.j2': 'RP interface block'
    common_trm_dict:
      '../templates/bgp_mvpn_af_trm.j2': 'BGP MVPN block'

  tasks:
    
# ------ load input files --------

            - name: Load and process TRM input file
              run_once: True
              block:
              - name: Load TRM input file
                when: playbook_mode != '-inc'
                block:
                - name: Load vars from trm_overlay_db.yml
                  include_vars: 
                    file: "./group_vars/trm_overlay_db.yml"
                    name: trm_db_vars

                - name: Get VRFs from trm_overlay_db.yml
                  set_fact: 
                    vrfs: "{{ trm_db_vars.vrfs }}"

              - name: Collect RP loopbacks and VRFs AFs from trm_overlay_db.yml
                trm_preprocess:
                  vrf_trm_info: "{{ {'vrfs': vrfs, 'inventory_leafs': groups['leaf']} }}"
                register: trm_db_data

              - set_fact: 
                  mvpns: "{{ trm_db_data.vrf_afs }}"
                  rp_interfaces: "{{ trm_db_data.rp_interfaces }}"

# ------ Get SVIs, RP loopback (from trm_overlay_db) to enable PIM --------

            - name: Get overlay data to collect VRFs and SVIs data
              when: inventory_hostname in groups['leaf'] and vrfs != {}
              block:
              - name: Run and parse show run nve
                ansible.utils.cli_parse:
                  command: "show run nve"
                  parser:
                    name: ansible.netcommon.pyats
                  set_fact: overlay_dict

              - name: Collect SVIs from the overlay data 
                set_fact:
                  svis: "{{ svis | default([]) + [ item.key ] }}"
                when: item.value.vrf in vrfs
                with_dict: "{{ overlay_dict.svis }}"

              - name: Get RP loopbacks to enable PIM-Sparse mode
                set_fact:
                  rp_per_device: "{{ trm_db_data.rp_per_device[inventory_hostname] | default([]) }}"

# ------ Get BGP L2VPN AF neighbors to configure MVPN AF--------

            - name: Collect BGP AFs from device
              block:

              - name: Run and parse show run | sec bgp
                ansible.utils.cli_parse:
                  command: "show run | sec bgp"
                  parser:
                    name: ansible.netcommon.pyats
                  set_fact: bgp_dict
                  
              - name: Collect L2VPN addr family neighbor and set it as MVPN AF neighbors
                block:
                - set_fact: 
                    bgp_list: "{{ bgp_dict.bgp | dict2items }}"
                - set_fact:
                    bgp: "{{ bgp | default({}) | combine(
                      { 'as_number': bgp_list[0].value.as_number | string },
                      { 'mvpn_neighbors': bgp_list[0].value.address_family['l2vpn evpn'].address_family_neighbor | list }
                      ) }}"

              - name: Set spines as RRC
                when: inventory_hostname in (groups['spine'] | default([]))
                set_fact:
                  bgp: "{{ bgp | default({}) | combine({'rrc': 'true'}) }}"

# ------ Deploy configs to the hosts --------

            # Following tasks in the block are skippped for spine if all VRFs in all devices are trm-enabled
            # and skipped for leaf if all VRFs in that host are trm-enabled


            - name: Activating TRM in the vrf defintion and under interfaces
              when: inventory_hostname in groups['leaf']
              cli_config:
                config: "{{ lookup('template', item.key) }}"
                diff_match: none
              register: result
              with_dict: "{{ leaf_trm_dict }}"
    
            - name: Activating BGP neighbor under IPv4/MVPN AFI/SAFI
              cli_config:
                config: "{{ lookup('template', item.key) }}"
                diff_match: none
              register: result
              with_dict: "{{ common_trm_dict }}"
