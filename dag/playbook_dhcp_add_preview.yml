---

- name: Enable DHCP for EVPN overlay
  hosts: leaf
  gather_facts: no
  vars:
    one_iter: false

  tasks:
            - name: Load and process DHCP input file
              run_once: true
              block:
              - name: set DHCP input file file if not already set
                when: input_vars_path is not defined
                set_fact: 
                  input_vars_path: "./"

              - name: Load vars from DHCP input file
                include_vars: 
                  file: "{{ input_vars_path }}group_vars/dhcp_db.yml"
            
              - name: Call python module to process dhcp_db.yml content
                dhcp_src_addr_info:
                  dhcp_info: "{{ dhcp }}"
                register: dhcp_config_info
            
              - name: Check for any error msg from python module for relay source interface processing
                when: dhcp_config_info['dhcp_ret_dict']['global_src_err'] != False
                fail:
                  msg: "Relay source interface for '{{ dhcp_config_info['dhcp_ret_dict']['global_src_err'] }}' is not defined in group_vars/dhcp_db.yml"
                any_errors_fatal: True
            
              - set_fact: 
                  dhcp_src_dict: "{{ dhcp_config_info.dhcp_ret_dict }}"

            - name: Get overlay details from sh_run_nve
              when: design is not defined
              block:
              - name: Run and parse show run nve
                ansible.utils.cli_parse:
                  command: "show run nve"
                  parser:
                    name: ansible.netcommon.pyats
                  set_fact: overlay_dict

              - set_fact:
                  one_iter: false
                  vrf_dict: "{{ overlay_dict.vrf }}"

            - name: Get overlay details from overlay_db.yml
              run_once: true
              when: design is defined
              block:
              - name: Load vars from overlay_db.yml
                include_vars: 
                  file: "{{ input_vars_path }}group_vars/overlay_db.yml"
                  name: overlay_dict

              - set_fact:
                  one_iter: true
                  vrf_dict: "{{ overlay_dict.vrfs }}"

            - name: Collect VRFs and SVIs data
              run_once: "{{ one_iter }}"
              block:
              - name: Collect VRFs from show run nve output if key is 'all'
                when: '"all" in dhcp.vrfs.keys()'
                set_fact: 
                  all_vrfs: "{{ vrf_dict.keys() }}"

              - name: Collect VRFs from dhcp_db.yml if key is not 'all'
                when: '"all" not in dhcp.vrfs.keys()'
                set_fact: 
                  all_vrfs: "{{ dhcp.vrfs.keys() }}"

              - name: Collect SVIs from show run nve output
                block:
                - name: Initialise svi dictionary
                  set_fact: 
                    svis: {}

                - name: Add vrfs to svi dictionary
                  set_fact: 
                    svis: "{{ svis | default({}) | combine ({ item : [] }) }}"
                  loop: "{{ all_vrfs }}"

                - name: Populate svi dictionary with show run nve output
                  set_fact: 
                    svis: "{{ svis | combine ({ item.value.vrf : svis[item.value.vrf]+[item.key] }) }}"
                  with_dict: "{{ overlay_dict.svis }}"
                  when: item.value.vrf in all_vrfs and item.value.svi_type == 'access'

            - name: Load vars from host_vars/node_vars/<inventory_hostname>.yml to get overlay interface info
              include_vars: 
                file: "{{ input_vars_path }}host_vars/node_vars/{{ inventory_hostname }}.yml"
                name: host_vars_vars

            - name: Get relay src interface for VRFs from host_vars/node_vars/<inventory>.yml
              block:
              - name: Call python module to assign relay src interface from host_vars/node_vars/<inventory>.yml for VRFs if not defined already
                dhcp_src_addr_info:
                  ovrly_intf_info: "{{ ovrly_intf_info | default({}) | combine ( {'all_vrfs': all_vrfs}, {'overlay_intf': host_vars_vars['overlay_interfaces']}, {'no_src_vrf': dhcp_src_dict['no_src_vrf']} ) }}"
                register: ovrly_intf_output
                
              - name: Check for any error msg from python module for relay source interface processing 
                when: ovrly_intf_output['dhcp_ret_dict']['intf_err'] != False
                fail:
                  msg: "Relay source interface for {{ ovrly_intf_output['dhcp_ret_dict']['intf_err'] }} is not defined and cannot be found in hostvars/{{inventory_hostname}}.yml"
                any_errors_fatal: True
                
              - set_fact: 
                  ovrly_intf_output: "{{ ovrly_intf_output.dhcp_ret_dict }}"
                
            - name: Read DHCP configuration template
              set_fact:
                dhcp_block: "! dhcp block\n!{{ lookup('template', '../templates/dhcp_overlay.j2') }}"
                
            - name: Render template files output
              set_fact:
                rendered: "{{  dhcp_block | regex_replace('#jinja2: lstrip_blocks: \"True\", trim_blocks: \"True\"', '') | regex_replace('\\n(\\s+)','\n') }}"
                
            - name: Copy configurations to respective file ( <hostname>-dhcp.txt ) under 'preview_files' folder
              copy:
                dest: preview_files/{{inventory_hostname}}-dhcp.txt
                content: "{{ rendered }}"


- name: Display output info
  hosts: localhost
  gather_facts: no
  run_once: True

  tasks:
    - debug:
        msg: Please refer to <hostname>-dhcp.txt in 'preview_files' folder
